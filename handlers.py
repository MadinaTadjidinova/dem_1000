import logging
import asyncio
import datetime
import time
import os
from aiogram import Bot, types, Router
from aiogram.filters import Command
from config import CHAT_ID, ADMIN_IDS, TOPICS, PAYMENT_REMINDER, sponsor_bot
from google_sheets import sheet, update_payment_status
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, FSInputFile, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from config import CHAT_ID, TOPICS

router = Router()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router

FAQ_TOPIC_ID = TOPICS["–ø—Ä–∞–≤–∏–ª–∞"] 
REPORT_TOPIC_ID = TOPICS.get("–æ—Ç—á—ë—Ç")

# ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

ASSETS_DIR = os.path.join(os.path.dirname(__file__), "assets")

# üîπ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
REPORTS_DIR = os.path.join(os.path.dirname(__file__), "reports")
os.makedirs(REPORTS_DIR, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

# üîπ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç—á–µ—Ç–∞–º
REPORT_FILES = {
    "events": None,
    "finance": None
}
# –•—Ä–∞–Ω–∏–º ID –û–î–ù–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏
REPORT_FILES = None

# üîπ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
REPORT_TOPIC_ID = TOPICS.get("–æ—Ç—á—ë—Ç", None)



# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
def get_reports_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="show_events_report")],
            [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="show_finance_report")]
        ]
    )

# üì• **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)**
@router.message(lambda message: message.document and message.caption and message.caption.startswith("/upload_report"))
async def handle_report_upload(message: types.Message, bot: Bot):
    global REPORT_FILES

    args = message.caption.split()
    if len(args) < 2 or args[1] not in ["events", "finance"]:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/upload_report events` –∏–ª–∏ `/upload_report finance`.")
        return

    report_type = args[1]
    file_path = os.path.join(REPORTS_DIR, f"{report_type}.pdf")

    # üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await bot.download(file=message.document, destination=file_path)

    # üîÑ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if REPORT_FILES:
        try:
            document = FSInputFile(file_path)
            caption = f"üìÑ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª."

            await bot.edit_message_media(
                chat_id=CHAT_ID,
                message_id=REPORT_FILES,
                media=InputMediaDocument(media=document, caption=caption),
                reply_markup=get_reports_keyboard()
            )
            await message.answer("‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â–µ –Ω–µ –±—ã–ª–æ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –û–î–ò–ù —Ä–∞–∑
        document = FSInputFile(file_path)
        caption = f"üìÑ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª."
        msg = await bot.send_document(
            chat_id=CHAT_ID,
            document=document,
            caption=caption,
            message_thread_id=REPORT_TOPIC_ID,
            reply_markup=get_reports_keyboard()
        )
        REPORT_FILES = msg.message_id  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID

    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç

# üìÑ **–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)**
@router.callback_query(lambda c: c.data in ["show_events_report", "show_finance_report"])
async def report_callback_handler(callback: types.CallbackQuery):
    global REPORT_FILES

    report_type = "events" if callback.data == "show_events_report" else "finance"
    file_path = os.path.join(REPORTS_DIR, f"{report_type}.pdf")

    if not os.path.exists(file_path):
        await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.", show_alert=True)
        return

    document = FSInputFile(file_path)
    caption = f"üìÑ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª."

    # üîÑ –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    if REPORT_FILES:
        try:
            await callback.bot.edit_message_media(
                chat_id=CHAT_ID,
                message_id=REPORT_FILES,
                media=InputMediaDocument(media=document, caption=caption),
                reply_markup=get_reports_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    await callback.answer()

# üîπ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ü—Ä–∞–≤–∏–ª –∏ FAQ
def get_rules_faq_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")],
            [InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
        ]
    )

# üîπ –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
FAQ_DATA = {
    "show_rules": "üìú **–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:**\n\n1Ô∏è‚É£ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã–º–∏\n2Ô∏è‚É£ –ù–µ —Å–ø–∞–º—å—Ç–µ\n3Ô∏è‚É£ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! ‚úÖ",
    "show_faq": "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n\nüîπ *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?* - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–†–µ–∫–≤–∏–∑–∏—Ç—ã'.\nüîπ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?* - –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüîπ *–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?* - –í–Ω–µ—Å—Ç–∏ 1000 —Å–æ–º –≤ —Ñ–æ–Ω–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É. üòâ"
}

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≤ —Ç–æ–ø–∏–∫ "–ü—Ä–∞–≤–∏–ª–∞"
async def send_faq_menu(bot: Bot):  # –ò–∑–º–µ–Ω–∏–ª–∏ types.Bot -> Bot
    await bot.send_message(
        chat_id=CHAT_ID,
        text="üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_rules_faq_keyboard(),
        message_thread_id=FAQ_TOPIC_ID
    )

# ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ "–ü—Ä–∞–≤–∏–ª–∞"
@router.message(lambda message: message.message_thread_id == FAQ_TOPIC_ID)
async def auto_faq_menu(message: types.Message):
    await message.answer("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_rules_faq_keyboard())

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(lambda c: c.data in FAQ_DATA)
async def faq_callback_handler(callback: types.CallbackQuery):
    new_text = FAQ_DATA[callback.data]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ callback_data
    await callback.message.edit_text(new_text, reply_markup=get_rules_faq_keyboard(), parse_mode="Markdown")
    await callback.answer()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ "–û –Ω–∞—Å"
def get_about_us_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="about_video")],
            [InlineKeyboardButton(text="üñº –§–æ—Ç–æ", callback_data="about_photo")],
            [InlineKeyboardButton(text="üìÇ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="about_projects")],
            [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="about_history")]
        ]
    )

async def send_about_menu(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤ —Ç–æ–ø–∏–∫ '–û –Ω–∞—Å' –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    topic_id = TOPICS["–æ–Ω–∞—Å"]
    await bot.send_message(
        CHAT_ID,
        "üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª '–û –Ω–∞—Å'!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_about_us_keyboard(),
        message_thread_id=topic_id
    )
    logging.info("üìå –ú–µ–Ω—é '–û –Ω–∞—Å' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

@router.message(lambda message: message.message_thread_id == TOPICS.get("–æ–Ω–∞—Å"))
async def auto_about_menu(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –≤ —Ç–æ–ø–∏–∫ '–û –Ω–∞—Å'."""
    topic_id = TOPICS["–æ–Ω–∞—Å"]
    logging.info(f"üìå –í —Ç–æ–ø–∏–∫–µ '–û –Ω–∞—Å' –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é.")
    await message.answer("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_about_us_keyboard())

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å `edit_message_text`
@router.callback_query(lambda c: c.data.startswith("about_"))
async def about_callback_handler(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª"""
    responses = {
        "about_video": ("üé• –í–∏–¥–µ–æ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n –±–æ–ª—å—à–µ –≤—ã–∏–¥–µ–æ –Ω–∞–π–¥–µ—Ç–µ –ø–æ —Å—ã—ã–ª–∫–µ -> https://drive.google.com/drive/folders/1CmsFgQQVetcUBFw8XcanelkNwxSBJjvm", "about_project.mp4"),
        "about_photo": ("üñº –§–æ—Ç–æ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ\n –ì–∞–ª–µ—Ä–µ—è —Ñ–æ—Ç–æ -> https://drive.google.com/drive/folders/1CXIOPapS8w06fJtm1KGbzjw5pgZ_nZhK", "photo.jpg"),
        "about_projects": (
        "üìÇ **–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:**\n\n"
        "1Ô∏è‚É£ **–î–µ–º-–∏–≤–µ–Ω—Ç** ‚Äì –ë–∏–∑–¥–∏–Ω –∫–∏—Ç–µ–ø–∫–∞–Ω–∞ –±–∞—à–∫–∞ –∫–∏—Ç–µ–ø–∫–∞–Ω–∞–ª–∞—Ä–¥–∞–Ω –∞–π—ã—Ä–º–∞–ª–∞–Ω—ã–ø –∂–∞—à–æ–æ—Å—É –∫—ã–∑—ã–∫—Ç—É—É –±–æ–ª—É—É—Å—É “Ø—á“Ø–Ω –∞—Ä –¥–∞–π—ã–º –∞—Ä –∫–∞–Ω–¥–∞–π —Ñ–æ—Ä–º–∞—Ç—Ç–∞–≥—ã –∏—à-—á–∞—Ä–∞–ª–∞—Ä–¥—ã —É—é—à—Ç—É—Ä—É–ø –∫–µ–ª–µ—Ç.\n\n"
        "2Ô∏è‚É£ **–î–µ–º-—ã–∫—Ç—ã—è—Ä—á—ã** ‚Äì –ö–æ–æ–º—É–±—É–∑–¥–∞–≥—ã –±–∞–∞—Ä–¥—ã–∫ –∂–∞—à—Ç–∞—Ä–¥—ã ”©–∑–≥”©—Ä—Ç”© –∞–ª–±–∞—Ä—ã–±—ã–∑ –∞–Ω—ã–∫, –±–∏—Ä–æ–∫ –±–∏—Ä –∏–Ω—Å–∞–Ω–¥—ã–Ω ”©–∑–≥”©—Ä“Ø“Ø—Å“Ø–Ω”© —Ç“Ø—Ä—Ç–∫“Ø –±–æ–ª–æ –∞–ª—Å–∞–∫, –∞–ª –∞–¥–∞–º –¥–∞–≥—ã –±–∞—à–∫–∞–ª–∞—Ä–≥–∞ —Ç–∞–∞—Å–∏—Ä –±–µ—Ä–µ—Ç. "
        "–û—à–æ–ª —Å–µ–±–µ–ø—Ç“Ø“Ø 14-18 –∂–∞—à—Ç–∞–≥—ã –æ–∫—É—É—á—É–ª–∞—Ä –º–µ–Ω–µ–Ω –∞–ª–∞—Ä–≥–∞ –∫—ã–∑—ã–∫—Ç—É—É –±–æ–ª–≥–æ–Ω –±–∞–≥—ã—Ç—Ç–∞—Ä –±–æ—é–Ω—á–∞ ”©–∑“Ø–Ω-”©–∑“Ø ”©–Ω“Ø–∫—Ç“Ø—Ä“Ø“Ø –ø—Ä–æ–≥—Ä–∞–º–º–∞—Å—ã–Ω –∏—à—Ç–µ–ø —á—ã–≥—ã–ø –∏—à –∞–ª—ã–ø –±–∞—Ä—É—É–¥–∞–±—ã–∑.\n\n"
        "3Ô∏è‚É£ **–õ–∏–¥–µ—Ä –º—É–≥–∞–ª–∏–º** ‚Äì –ê–∫—ã—Ä–∫—ã –º–µ–∑–≥–∏–ª–¥–µ –º—É–≥–∞–ª–∏–º–¥–µ—Ä–¥–∏–Ω –∫–æ–æ–º–¥–æ–≥—É –æ—Ä–¥—É —Ç”©–º”©–Ω–¥”©–ø –∫–µ—Ç–∫–µ–Ω –∫”©—Ä“Ø–Ω“Ø—à–∫”© –∫“Ø–±”© –±–æ–ª—É—É–¥–∞–±—ã–∑. "
        "–ë—É–ª –¥–æ–ª–±–æ–æ—Ä–¥—É–Ω –Ω–µ–≥–∏–∑–≥–∏ –º–∞–∫—Å–∞—Ç—ã –º—É–≥–∞–ª–∏–º–¥–µ—Ä–¥–∏–Ω –±–µ–¥–µ–ª–∏–Ω –∞–ª–∞—Ä–¥—ã–Ω –∫–µ—Å–∏–ø–∫”©–π–ª“Ø–≥“Ø–Ω –∫“Ø—á”©—Ç“Ø“Ø, ”©–∑“Ø–Ω-”©–∑“Ø ”©–Ω“Ø–∫—Ç“Ø—Ä“Ø“Ø—Å“Ø –∞—Ä–∫—ã–ª—É—É¬†–∫”©—Ç”©—Ä“Ø“Ø.",
        "projects.jpg"
    ),
        "about_history": ("üìú **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞**:\n–ù–∞—à –ø—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ ... (—Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ).", "history.jpg"),
    }

    # text, image_filename = responses.get(callback.data, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    response = responses.get(callback.data)
    
    if response is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    text, file_name = response

    file_path = os.path.join(ASSETS_DIR, file_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(file_path):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    media_file = FSInputFile(file_path)

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if file_name.lower().endswith((".jpg", ".jpeg", ".png")):
        media = InputMediaPhoto(media=media_file, caption=text)
    elif file_name.lower().endswith((".mp4", ".mov", ".avi", ".mkv")):
        media = InputMediaVideo(media=media_file, caption=text)
    else:
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", show_alert=True)
        return

    try:
        await callback.message.edit_media(media, reply_markup=get_about_us_keyboard())
    except Exception as e:
        await callback.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {str(e)}", show_alert=True)

    await callback.answer()


@router.message(Command("send"))
async def send_to_topic(message: types.Message):
    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /send –æ—Ç {message.from_user.username}: {message.text}")

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –±–µ—Ä–µ–º caption, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    raw_text = message.caption if message.caption else message.text

    if not raw_text:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send.")
        return

    args = raw_text.split(maxsplit=2)

    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /send [—Ç–æ–ø–∏–∫] [—Ç–µ–∫—Å—Ç]")
        return

    topic_name = args[1].lower()
    text = args[2]

    if topic_name not in TOPICS:
        await message.answer(f"‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –Ω–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(TOPICS.keys())}")
        return

    topic_id = TOPICS[topic_name]

    # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ "general", `message_thread_id` –Ω–µ –Ω—É–∂–µ–Ω
    message_kwargs = {"chat_id": CHAT_ID, "caption": text}
    if topic_name != "general":
        message_kwargs["message_thread_id"] = topic_id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç)
    if message.photo:
        await message.bot.send_photo(**message_kwargs, photo=message.photo[-1].file_id)
    elif message.video:
        await message.bot.send_video(**message_kwargs, video=message.video.file_id)
    elif message.document:
        await message.bot.send_document(**message_kwargs, document=message.document.file_id)
    elif message.voice:
        await message.bot.send_voice(**message_kwargs, voice=message.voice.file_id)

    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.bot.send_message(CHAT_ID, text, message_thread_id=topic_id if topic_name != "general" else None)

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ **{topic_name}**!")


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 
async def auto_send_payment_reminder(bot: Bot):
    """–ê–≤—Ç–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    topic_id = TOPICS["general"]

    today = datetime.datetime.now().day
    if today == 18:
        await bot.send_message(CHAT_ID, PAYMENT_REMINDER)
        logging.info("üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú 1-–≥–æ —á–∏—Å–ª–∞.")
    
    elif today == 25:
        unpaid_users = get_unpaid_users()
        
        if unpaid_users:
            for user_id in unpaid_users:
                await bot.send_message(user_id, "‚ö† –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤–∑–Ω–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.")
            logging.info(f"üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(unpaid_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏.")
        else:
            logging.info("‚úÖ –í—Å–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 5-–≥–æ —á–∏—Å–ª–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
        logging.info("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ 1-–µ –∏ –Ω–µ 5-–µ —á–∏—Å–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")



# üÜï –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
@router.callback_query()
async def process_payment_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'"""
    data = callback.data.split("|")

    if len(data) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    action, user_id, amount = data[0], data[1], data[2]
    logging.info(f"üü¢ –ü–æ–ª—É—á–µ–Ω callback: {action}, user_id={user_id}, amount={amount}")

    def clean_text(value):
        return str(value).strip().replace("\u00A0", " ")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ Google Sheets
    records = [{k.strip(): v for k, v in row.items()} for row in sheet.get_all_records()]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    row_number = None

    for i, row in enumerate(records, start=2):  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É {i}: {row}")  # üîπ –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        if clean_text(row["Telegram ID"]) == clean_text(user_id) and clean_text(row["–°—É–º–º–∞"]) == clean_text(amount):
            row_number = i
            break

    if row_number is None:
        logging.warning(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω! user_id={user_id}, amount={amount}")
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets!", show_alert=True)
        return
    time.sleep(0.5) 

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ Google Sheets
    if action == "confirm":
        sheet.update_acell(f"F{row_number}", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")  # –ö–æ–ª–æ–Ω–∫–∞ "–°—Ç–∞—Ç—É—Å"
        await callback.message.edit_caption(
            f"‚úÖ –ß–µ–∫ –æ—Ç @{callback.from_user.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
            reply_markup=None
        )
        await sponsor_bot.send_message(user_id, "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        logging.info(f"‚úÖ –ß–µ–∫ –æ—Ç user_id={user_id} –Ω–∞ —Å—É–º–º—É {amount} —Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

    elif action == "reject":
        sheet.update_acell(f"F{row_number}", "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")  # –ö–æ–ª–æ–Ω–∫–∞ "–°—Ç–∞—Ç—É—Å"
        await callback.message.edit_caption(
            f"‚ùå –ß–µ–∫ –æ—Ç @{callback.from_user.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω!",
            reply_markup=None
        )
        await sponsor_bot.send_message(user_id, "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —á–µ–∫.")
        logging.info(f"‚ùå –ß–µ–∫ –æ—Ç user_id={user_id} –Ω–∞ —Å—É–º–º—É {amount} —Å–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

    await callback.answer()